name: CI/CD Pipeline

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  lint:
    name: Lint Code
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Install frontend dependencies
        run: cd public/dashboard-app && npm ci

      - name: Run Backend ESLint
        run: npm run lint

      - name: Run Frontend ESLint
        run: npm run lint:frontend

  test-backend:
    name: Test Backend
    runs-on: ubuntu-latest
    needs: lint
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run backend tests
        run: npm run test:backend

  test-frontend:
    name: Test Frontend
    runs-on: ubuntu-latest
    needs: lint
    env:
      CI: true
      NODE_ENV: test
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install backend dependencies
        run: npm ci

      - name: Install frontend dependencies
        run: cd public/dashboard-app && npm ci

      - name: Run frontend tests
        run: cd public/dashboard-app && npm run test:ci

  e2e-tests:
    name: E2E Tests
    runs-on: ubuntu-latest
    needs: [test-backend, test-frontend]
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Install wait-on for server coordination
        run: npm install -g wait-on

      - name: Install Playwright browsers
        run: npx playwright install --with-deps

      - name: Start backend server
        run: |
          npm run start:ci &
          echo $! > backend.pid
        
      - name: Install frontend dependencies and start frontend server
        run: |
          cd public/dashboard-app
          npm ci
          npm start &
          echo $! > ../../frontend.pid

      - name: Wait for servers to start
        run: |
          npx wait-on http://localhost:3000/api/health --timeout 60000
          npx wait-on http://localhost:3001 --timeout 60000

      - name: Run Playwright tests
        run: npm run playwright:test

      - name: Stop servers
        if: always()
        run: |
          if [ -f backend.pid ]; then kill $(cat backend.pid) || true; fi
          if [ -f frontend.pid ]; then kill $(cat frontend.pid) || true; fi

      - name: Archive test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: playwright-report
          path: playwright-report/
          retention-days: 7

      - name: Archive test artifacts
        uses: actions/upload-artifact@v4
        if: failure()
        with:
          name: test-results
          path: test-results/
          retention-days: 7

  build:
    name: Build Application
    runs-on: ubuntu-latest
    needs: [test-backend, test-frontend]
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install backend dependencies
        run: npm ci

      - name: Install frontend dependencies
        run: cd public/dashboard-app && npm ci

      - name: Build frontend
        run: cd public/dashboard-app && npm run build

      - name: Archive build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-artifacts
          path: |
            public/dashboard-app/build
            package.json
            package-lock.json
            src/**
            .sequelizerc

  deploy:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [build, e2e-tests]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    steps:
      - name: Download build artifacts
        uses: actions/download-artifact@v3
        with:
          name: build-artifacts
          path: ./

      - name: Deploy to Production
        run: |
          echo "Deploying to production"
          # Add your deployment commands here
          # For example:
          # - Deploy to AWS
          # - Deploy to Heroku
          # - Deploy to a custom server using SSH